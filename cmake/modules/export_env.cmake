# ========================================================
# export_env.cmake Always writes global /tmp/build-meta files for automation
# ========================================================

string(ASCII 27 Esc) # escape character

set(RESET "${Esc}[0m")
set(BOLD "${Esc}[1m")
set(GREEN "${Esc}[32m")
set(YELLOW "${Esc}[33m")
set(CYAN "${Esc}[36m")

# --- Ensure PROJECT_NAME exists ---
if(NOT PROJECT_NAME)
  message(
    FATAL_ERROR
      "ExportEnv: PROJECT_NAME is not set. Add 'project(...)' in your CMakeLists.txt"
  )
endif()

# --- Project root (where CMakeLists.txt is) ---
set(PROJECT_ROOT "${CMAKE_SOURCE_DIR}")

# --- Build directory ---
set(BUILD_DIR "${CMAKE_BINARY_DIR}")

# --- Executable path ---
if(TARGET ${PROJECT_NAME})
  get_target_property(EXEC_DIR ${PROJECT_NAME} RUNTIME_OUTPUT_DIRECTORY)
  if(NOT EXEC_DIR)
    set(EXEC_DIR "${CMAKE_CURRENT_BINARY_DIR}") # fallback
  endif()
  set(EXECUTABLE_PATH "${EXEC_DIR}/${PROJECT_NAME}")
else()
  set(EXECUTABLE_PATH "NOT_BUILT_YET")
endif()

# --- Variables to export (always the same) ---
set(EXPORT_VARS PROJECT_NAME PROJECT_ROOT BUILD_DIR EXECUTABLE_PATH)

# --- Ensure tmp folder exists ---
set(EXPORT_DIR "/tmp/build-meta")
file(MAKE_DIRECTORY ${EXPORT_DIR})

# --- File paths ---
set(ENV_FILE "${EXPORT_DIR}/env.sh")
set(JSON_FILE "${EXPORT_DIR}/config.json")

# --- Write env.sh ---
file(WRITE ${ENV_FILE} "# Autogenerated by export_env.cmake\n")
foreach(_var ${EXPORT_VARS})
  file(APPEND ${ENV_FILE} "export ${_var}=\"${${_var}}\"\n")
endforeach()

# --- Write config.json ---
file(WRITE ${JSON_FILE} "{\n")
list(LENGTH EXPORT_VARS _len)
math(EXPR _last "${_len}-1")
foreach(i RANGE 0 ${_last})
  list(GET EXPORT_VARS ${i} _var)
  if(i LESS _last)
    file(APPEND ${JSON_FILE} "  \"${_var}\": \"${${_var}}\",\n")
  else()
    file(APPEND ${JSON_FILE} "  \"${_var}\": \"${${_var}}\"\n")
  endif()
endforeach()
file(APPEND ${JSON_FILE} "}\n")

# --- Output info ---
message(
  STATUS
    "${GREEN}ExportEnv:${RESET} wrote ${CYAN}${ENV_FILE}${RESET} and ${CYAN}${JSON_FILE}${RESET}"
)

foreach(_var ${EXPORT_VARS})
  message(STATUS "  ${YELLOW}${_var}${RESET} = ${BOLD}${${_var}}${RESET}")
endforeach()
